import 'package:flutter/material.dart';

class PlantGridWidget extends StatefulWidget {
  const PlantGridWidget({super.key});

  @override
  State<PlantGridWidget> createState() => _PlantGridWidgetState();
}

class _PlantGridWidgetState extends State<PlantGridWidget> {
  // ÏûÑÏãú ÏãùÎ¨º Îç∞Ïù¥ÌÑ∞ (ÏàòÏßë/ÎØ∏ÏàòÏßë Íµ¨Î∂Ñ)
  final List<PlantData> _plants = [
    PlantData(
      id: 'plant_001',
      name: 'Í∏∞Î≥∏ ÏãùÎ¨º',
      image: 'üå±',
      description: 'Í∏∞Î≥∏Ï†ÅÏù∏ ÏãùÎ¨ºÏûÖÎãàÎã§. Î¨ºÏùÑ Ï£ºÎ©¥ ÏûêÎùºÏöî!',
      isCollected: true,
      stage: 2,
    ),
    PlantData(
      id: 'plant_002',
      name: 'Ìä§Î¶Ω',
      image: 'üå∑',
      description: 'ÏïÑÎ¶ÑÎã§Ïö¥ Ìä§Î¶ΩÏûÖÎãàÎã§. Î¥ÑÏóê ÌîºÏñ¥ÎÇòÏöî.',
      isCollected: true,
      stage: 3,
    ),
    PlantData(
      id: 'plant_003',
      name: 'ÎØºÎì§Î†à',
      image: 'üåº',
      description: 'ÎÖ∏ÎûÄ ÎØºÎì§Î†àÏûÖÎãàÎã§. Î∞îÎûåÏóê ÎÇ†Î†§Í∞ÄÏöî.',
      isCollected: true,
      stage: 1,
    ),
    PlantData(
      id: 'plant_004',
      name: 'Ïû•ÎØ∏',
      image: 'üåπ',
      description: 'ÏÇ¨ÎûëÏùò ÍΩÉ Ïû•ÎØ∏ÏûÖÎãàÎã§.',
      isCollected: false,
      stage: 0,
    ),
    PlantData(
      id: 'plant_005',
      name: 'Ìï¥Î∞îÎùºÍ∏∞',
      image: 'üåª',
      description: 'ÌÉúÏñëÏùÑ Îî∞Îùº ÎèÑÎäî Ìï¥Î∞îÎùºÍ∏∞ÏûÖÎãàÎã§.',
      isCollected: false,
      stage: 0,
    ),
    PlantData(
      id: 'plant_006',
      name: 'ÏÑ†Ïù∏Ïû•',
      image: 'üåµ',
      description: 'ÏÇ¨ÎßâÏùò ÏÑ†Ïù∏Ïû•ÏûÖÎãàÎã§. Î¨ºÏùÑ Ï†ÅÍ≤å ÎßàÏÖîÏöî.',
      isCollected: true,
      stage: 2,
    ),
    PlantData(
      id: 'plant_007',
      name: 'ÎÇòÎ¨¥',
      image: 'üå≥',
      description: 'ÌÅ∞ ÎÇòÎ¨¥ÏûÖÎãàÎã§. ÎßéÏùÄ Î¨ºÏù¥ ÌïÑÏöîÌï¥Ïöî.',
      isCollected: false,
      stage: 0,
    ),
    PlantData(
      id: 'plant_008',
      name: 'Î≤ÑÏÑØ',
      image: 'üçÑ',
      description: 'Îπ®Í∞Ñ Î≤ÑÏÑØÏûÖÎãàÎã§. Ï°∞Ïã¨Ìï¥ÏÑú ÌÇ§Ïö∞ÏÑ∏Ïöî.',
      isCollected: false,
      stage: 0,
    ),
    PlantData(
      id: 'plant_009',
      name: 'ÌÅ¥Î°úÎ≤Ñ',
      image: 'üçÄ',
      description: 'ÎÑ§Ïûé ÌÅ¥Î°úÎ≤ÑÏûÖÎãàÎã§. ÌñâÏö¥ÏùÑ Í∞ÄÏ†∏Îã§Ï§òÏöî.',
      isCollected: true,
      stage: 1,
    ),
  ];

  @override
  Widget build(BuildContext context) {
    // ÏàòÏßëÎêú ÏãùÎ¨º Ïàò Í≥ÑÏÇ∞
    final collectedCount = _plants.where((plant) => plant.isCollected).length;
    final totalCount = _plants.length;
    final completionRate = totalCount > 0 ? collectedCount / totalCount : 0.0;

    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // ÎèÑÍ∞ê ÏôÑÏÑ±ÎèÑ ÌëúÏãú
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue.shade50,
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: Colors.blue.shade200),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text(
                      'ÎèÑÍ∞ê ÏôÑÏÑ±ÎèÑ',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue,
                      ),
                    ),
                    Text(
                      '$collectedCount / $totalCount',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.blue.shade700,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                LinearProgressIndicator(
                  value: completionRate,
                  backgroundColor: Colors.blue.shade100,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.blue.shade600),
                  minHeight: 8,
                ),
                const SizedBox(height: 8),
                Text(
                  '${(completionRate * 100).toInt()}% ÏôÑÏÑ±',
                  style: TextStyle(
                    fontSize: 14,
                    color: Colors.blue.shade600,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 24),

          // ÏãùÎ¨º Í∑∏Î¶¨Îìú
          Expanded(
            child: GridView.builder(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                crossAxisSpacing: 12,
                mainAxisSpacing: 12,
                childAspectRatio: 0.8,
              ),
              itemCount: _plants.length,
              itemBuilder: (context, index) {
                final plant = _plants[index];
                return _buildPlantCard(plant);
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPlantCard(PlantData plant) {
    return GestureDetector(
      onTap: plant.isCollected ? () => _showPlantDetail(plant) : null,
      child: Container(
        decoration: BoxDecoration(
          color: plant.isCollected ? Colors.white : Colors.grey.shade100,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: plant.isCollected ? Colors.green.shade200 : Colors.grey.shade300,
            width: 2,
          ),
          boxShadow: plant.isCollected ? [
            BoxShadow(
              color: Colors.green.withOpacity(0.1),
              spreadRadius: 1,
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ] : null,
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // ÏãùÎ¨º Ïù¥ÎØ∏ÏßÄ
            Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                color: plant.isCollected ? Colors.green.shade50 : Colors.grey.shade200,
                borderRadius: BorderRadius.circular(30),
                border: Border.all(
                  color: plant.isCollected ? Colors.green.shade200 : Colors.grey.shade300,
                ),
              ),
              child: Center(
                child: Text(
                  plant.isCollected ? plant.image : '?',
                  style: TextStyle(
                    fontSize: 30,
                    color: plant.isCollected ? null : Colors.grey.shade400,
                  ),
                ),
              ),
            ),
            const SizedBox(height: 8),

            // ÏãùÎ¨º Ïù¥Î¶Ñ
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 4),
              child: Text(
                plant.isCollected ? plant.name : '???',
                style: TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: plant.isCollected ? Colors.black87 : Colors.grey.shade500,
                ),
                textAlign: TextAlign.center,
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ),

            // ÏàòÏßë ÏÉÅÌÉú ÌëúÏãú
            if (plant.isCollected) ...[
              const SizedBox(height: 4),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: Colors.green.shade100,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  'Stage ${plant.stage}',
                  style: TextStyle(
                    fontSize: 10,
                    color: Colors.green.shade700,
                    fontWeight: FontWeight.w500,
                  ),
                ),
              ),
            ] else ...[
              const SizedBox(height: 4),
              Icon(
                Icons.lock_outline,
                size: 16,
                color: Colors.grey.shade400,
              ),
            ],
          ],
        ),
      ),
    );
  }

  void _showPlantDetail(PlantData plant) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Text(plant.image, style: const TextStyle(fontSize: 24)),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                plant.name,
                style: const TextStyle(fontSize: 18),
              ),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              plant.description,
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.green.shade50,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.green.shade200),
              ),
              child: Row(
                children: [
                  Icon(Icons.local_florist, color: Colors.green.shade600),
                  const SizedBox(width: 8),
                  Text(
                    'ÏÑ±Ïû• Îã®Í≥Ñ: ${plant.stage}',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: Colors.green.shade700,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Îã´Í∏∞'),
          ),
        ],
      ),
    );
  }
}

// ÏãùÎ¨º Îç∞Ïù¥ÌÑ∞ Î™®Îç∏
class PlantData {
  final String id;
  final String name;
  final String image;
  final String description;
  final bool isCollected;
  final int stage;

  PlantData({
    required this.id,
    required this.name,
    required this.image,
    required this.description,
    required this.isCollected,
    required this.stage,
  });
}
